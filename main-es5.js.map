{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/http-interceptors/index.ts","webpack:///src/app/http-interceptors/my-interceptor.ts","webpack:///src/app/http-service/api-service.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","testservice","title","getdetail","subscribe","response","console","log","error","fetchdetail","selector","templateUrl","styleUrls","AppModule","declarations","bootstrap","providers","httpInterceptProviders","provide","useClass","multi","MyInterceptor","request","next","token","localStorage","getItem","clone","headers","set","has","handle","pipe","event","ApiServiceService","http","get","providedIn","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport {ApiServiceService} from '../app/http-service/api-service.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ngtiny-editor';\n  constructor(private testservice : ApiServiceService) {\n    \n  }\n  fetchdetail(){\n    this.testservice.getdetail().subscribe(\n      (response) => {\n        console.log(response);\n        return response;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n}\n","<button (click)=\"fetchdetail()\" class=\"btn\">test</button>\n\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n// import { MyInterceptor } from './http-interceptors/my-interceptor';\nimport { httpInterceptProviders } from './http-interceptors/index'\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  bootstrap: [AppComponent],\n  providers: [\n  //   {\n  //     provide: HTTP_INTERCEPTORS,\n  //     useClass: MyInterceptor,\n  //     multi: true\n  //   },\n    httpInterceptProviders\n  ]\n})\nexport class AppModule { }\n","import {HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport { ErrorHandler } from '@angular/core';\r\nimport  { MyInterceptor } from '../http-interceptors/my-interceptor';\r\n\r\nexport const httpInterceptProviders =[\r\n    {provide: HTTP_INTERCEPTORS, useClass: MyInterceptor,multi:true},\r\n    // {provide: HTTP_INTERCEPTORS, useClass: ErrorHandlerInterceptor,multi:true}\r\n]\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpResponse,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class MyInterceptor implements HttpInterceptor {\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const token: string = localStorage.getItem('token');\r\n\r\n        if (!token) {\r\n            request = request.clone({ headers: request.headers.set('Authorization', 'Some-dummyCode') });\r\n        }\r\n\r\n        if (!request.headers.has('Content-Type')) {\r\n            request = request.clone({ headers: request.headers.set('Content-Type', 'application/json') });\r\n        }\r\n\r\n        request = request.clone({ headers: request.headers.set('Accept', 'application/json') });\r\n\r\n        return next.handle(request).pipe(\r\n            map((event: HttpEvent<any>) => {\r\n                if (event instanceof HttpResponse) {\r\n                    console.log('event--->>>', event);\r\n                }\r\n                return event;\r\n            }));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiServiceService {\n  constructor(private http: HttpClient) {}\n  getdetail() {\n    return this.http.get('https://jsonplaceholder.typicode.com/todos');\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}